#!/usr/bin/env python3

import fitz
import re, sys, os
import pats, utils

path = sys.argv[1]
assert(os.path.isfile(path))

pdf = fitz.open(path)
pdf_text, char_info = utils.parse(pdf)

#with open('out.txt', 'wb') as f:
#    f.write(pdf_text.encode('utf-8', errors='ignore'))

if len(sys.argv) > 2:
    pat = pats.patterns[sys.argv[2]]
else:
    print('Defaulting to IEEE ref style')
    pat = pats.patterns['ieee']

# Find reference list starting point
m_ref_list = list(re.finditer(pats.start_of_ref_list, pdf_text, re.M))
assert(len(m_ref_list) == 1)
m_ref_list = m_ref_list[0]

# Find all reference destinations
dst = {}
for m_dst in re.finditer(pat['dst'], pdf_text[m_ref_list.end():], re.M | re.S):
    pg, x0, y0, x1, y1, *_ = char_info[m_dst.start() + m_ref_list.end()]
    key = m_dst.groups()
    if key in dst.keys():
        print(f'Warning: duplicate reference key {key}')
    else:
        dst[key] = (pg, x0, y0)
        #pdf[pg].add_highlight_annot([x0, y0, x1, y1])

if pat['alt-ref']:
    for m in re.finditer(pat['alt-ref'], pdf_text, re.M | re.S):
        start, end = m.span()

        prev_y0 = char_info[start][2]
        segments = [list(char_info[start][0:5])]
        for i in range(start, end):
            pg, x0, y0, x1, y1, s = char_info[i]
            if y0 == prev_y0:
                segments[-1][3] = x1
            else:
                segments.append(list(char_info[i][0:5]))
                prev_y0 = y0
            
        d_pg, d_x, d_y = dst.get(m.groups(), [None]*3)

        for s in segments:
            page = pdf[s[0]]
            h = page.add_highlight_annot(s[1:5])
            if not d_pg:
                h.set_colors({'stroke': (1,0,0), 'fill': None})
                h.update()
            if d_pg:
                page.insert_link({
                    'kind': fitz.LINK_GOTO,
                    'from': fitz.Rect(*s[1:5]), 
                    'page': d_pg,
                    'to': fitz.Point(d_x, d_y),
                })

# Create links for references
for m_refs in re.finditer(pat['refs'], pdf_text, re.M | re.S):
    for m in re.finditer(pat['ref'], m_refs.group()):

        start, end = m.span()[0] + m_refs.start(), m.span()[1] + m_refs.start()

        prev_y0 = char_info[start][2]
        segments = [list(char_info[start][0:5])]
        for i in range(start, end):
            pg, x0, y0, x1, y1, s = char_info[i]
            if y0 == prev_y0:
                segments[-1][3] = x1
            else:
                segments.append(list(char_info[i][0:5]))
                prev_y0 = y0
            
        d_pg, d_x, d_y = dst.get(m.groups(), [None]*3)

        for s in segments:
            page = pdf[s[0]]
            h = page.add_highlight_annot(s[1:5])
            if not d_pg:
                h.set_colors({'stroke': (1,0,0), 'fill': None})
                h.update()
            if d_pg:
                page.insert_link({
                    'kind': fitz.LINK_GOTO,
                    'from': fitz.Rect(*s[1:5]), 
                    'page': d_pg,
                    'to': fitz.Point(d_x, d_y),
                })

os.rename(path, path + '.old')
pdf.save(path + '.new')
pdf.close()
os.rename(path + '.new', path)
